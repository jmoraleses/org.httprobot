<?xml version="1.0" encoding="UTF-8"?>
<!--

DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

Copyright (c) 2012 Oracle and/or its affiliates. All rights reserved.

The contents of this file are subject to the terms of either the GNU
General Public License Version 2 only ("GPL") or the Common Development
and Distribution License("CDDL") (collectively, the "License").  You
may not use this file except in compliance with the License.  You can
obtain a copy of the License at
http://glassfish.java.net/public/CDDL+GPL_1_1.html
or packager/legal/LICENSE.txt.  See the License for the specific
language governing permissions and limitations under the License.

When distributing the software, include this License Header Notice in each
file and include the License file at packager/legal/LICENSE.txt.

GPL Classpath Exception:
Oracle designates this particular file as subject to the "Classpath"
exception as provided by Oracle in the GPL Version 2 section of the License
file that accompanied this code.

Modifications:
If applicable, add the following below the License Header, with the fields
enclosed by brackets [] replaced by your own identifying information:
"Portions Copyright [year] [name of copyright owner]"

Contributor(s):
If you wish your version of this file to be governed by only the CDDL or
only the GPL Version 2, indicate your decision by adding "[Contributor]
elects to include this software in this distribution under the [CDDL or GPL
Version 2] license."  If you don't indicate a single choice of license, a
recipient has the option to distribute your version of this file under
either the CDDL, the GPL Version 2 or to extend the choice of license to
its licensees as provided above.  However, if you add GPL Version 2 code
and therefore, elected the GPL Version 2 license, then the option applies
only if the new code is made subject to such option by the copyright
holder.

        -->
<!DOCTYPE book [
<!ENTITY % ents SYSTEM "docbook.ent">
%ents;
]>
<section version="5.0"
         xml:id="other-miscellaneous-topics-performance-and-thread-safety"
         xml:lang="en" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:ns5="http://www.w3.org/1999/xhtml"
         xmlns:ns3="http://www.w3.org/2000/svg"
         xmlns:ns="http://docbook.org/ns/docbook"
         xmlns:m="http://www.w3.org/1998/Math/MathML">
    <title>Performance and thread-safety</title>

    <para>The JAXBContext class is thread safe, but the Marshaller,
    Unmarshaller, and Validator classes are not thread safe.</para>

    <para>For example, suppose you have a multi-thread server application that
    processes incoming XML documents by JAXB. In this case, for the best
    performance you should have just one instance of JAXBContext in your whole
    application like this:</para>

    <example>
        <title>Singleton JAXBContext</title>

        <programlisting language="java"><![CDATA[class MyServlet extends HttpServlet {
    static final JAXBContext context = initContext();

    private static JAXBContext initContext() {
        return JAXBContext.newInstance(Foo.class,Bar.class);
    }
}]]></programlisting>
    </example>

    <para>And each time you need to unmarshal/marshal/validate a document.
    Just create a new Unmarshaller/Marshaller/Validator from this context,
    like this:</para>

    <example>
        <title>Thread local Unmarshaller</title>

        <programlisting language="java"><![CDATA[    public void doGet( HttpServletRequest req, HttpServletResponse ) {
        Unmarshaller u = context.createUnmarshaller();
        u.unmarshal(...);
    }]]></programlisting>
    </example>

    <para>This is the simplest safe way to use the JAXB RI from multi-threaded
    applications.</para>

    <para>If you really care about the performance, and/or your application is
    going to read a lot of small documents, then creating Unmarshaller could
    be relatively an expensive operation. In that case, consider pooling
    Unmarshaller objects. Different threads may reuse one Unmarshaller
    instance, as long as you don't use one instance from two threads at the
    same time.</para>
</section>
