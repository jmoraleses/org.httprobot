<?xml version="1.0" encoding="UTF-8"?>
<!--

DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

Copyright (c) 2012 Oracle and/or its affiliates. All rights reserved.

The contents of this file are subject to the terms of either the GNU
General Public License Version 2 only ("GPL") or the Common Development
and Distribution License("CDDL") (collectively, the "License").  You
may not use this file except in compliance with the License.  You can
obtain a copy of the License at
http://glassfish.java.net/public/CDDL+GPL_1_1.html
or packager/legal/LICENSE.txt.  See the License for the specific
language governing permissions and limitations under the License.

When distributing the software, include this License Header Notice in each
file and include the License file at packager/legal/LICENSE.txt.

GPL Classpath Exception:
Oracle designates this particular file as subject to the "Classpath"
exception as provided by Oracle in the GPL Version 2 section of the License
file that accompanied this code.

Modifications:
If applicable, add the following below the License Header, with the fields
enclosed by brackets [] replaced by your own identifying information:
"Portions Copyright [year] [name of copyright owner]"

Contributor(s):
If you wish your version of this file to be governed by only the CDDL or
only the GPL Version 2, indicate your decision by adding "[Contributor]
elects to include this software in this distribution under the [CDDL or GPL
Version 2] license."  If you don't indicate a single choice of license, a
recipient has the option to distribute your version of this file under
either the CDDL, the GPL Version 2 or to extend the choice of license to
its licensees as provided above.  However, if you add GPL Version 2 code
and therefore, elected the GPL Version 2 license, then the option applies
only if the new code is made subject to such option by the copyright
holder.

        -->
<!DOCTYPE book [
<!ENTITY % ents SYSTEM "docbook.ent">
%ents;
]>
<section version="5.0" xml:id="compiling-xml-schema-mapping-of-xs-any"
         xml:lang="en" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:ns5="http://www.w3.org/1999/xhtml"
         xmlns:ns3="http://www.w3.org/2000/svg"
         xmlns:ns="http://docbook.org/ns/docbook"
         xmlns:m="http://www.w3.org/1998/Math/MathML">
    <title>Mapping of <literal>&lt;xs:any /&gt;</literal></title>

    <para>XJC binds <literal>&lt;xs:any /&gt;</literal> in the following ways:</para>

    <section xml:id="processContents__skip_">
        <title><literal>processContents="skip"</literal></title>

        <para><literal>&lt;xs:any /&gt;</literal> with <code>processContents=skip</code> means
        any well-formed XML elements can be placed. Therefore, XJC binds this
        to DOM <literal>Element</literal> interface.</para>

        <example>
            <title>Any/Skip schema</title>

            <programlisting language="xml"><![CDATA[<xs:element name="person">
  <xs:complexType>
    <xs:sequence>
      <xs:element name="name" type="xs:string" />
      <xs:any processContents="skip" maxOccurs="unbounded" minOccurs="0" />
    </xs:sequence>
  </xs:complexType>
</xs:element>]]></programlisting>
        </example>

        <example>
            <title>Any/Skip binding</title>

            <programlisting language="java"><![CDATA[import org.w3c.dom.Element;

@XmlRootElement
class Person {
  public String getName();
  public void setName(String);

  @XmlAnyElement
  public List<Element> getAny();
}]]></programlisting>
        </example>
    </section>

    <section xml:id="processContents__strict_">
        <title><literal>processContents="strict"</literal></title>

        <para><literal>&lt;xs:any /&gt;</literal> with <code>processContents=strict</code> (or
        <literal>&lt;xs:any /&gt;</literal> without any processContents attribute, since it
        defaults to "strict") means any XML elements placed here must have
        corresponding schema definitions. This mode is not what people
        typically expect as "<literal>wildcard</literal>", but this is the default. The following
        shows this binding. (<code>lax=true</code> is unintuitive, but it's
        not an error in this document):</para>

        <example>
            <title>Any/Strict schema</title>

            <programlisting language="xml"><![CDATA[<xs:element name="person">
  <xs:complexType>
    <xs:sequence>
      <xs:element name="name" type="xs:string" />
      <xs:any maxOccurs="unbounded" minOccurs="0" />
    </xs:sequence>
  </xs:complexType>
</xs:element>]]></programlisting>
        </example>

        <example>
            <title>Any/Strict binding</title>

            <programlisting language="java"><![CDATA[@XmlRootElement
class Person {
  public String getName();
  public void setName(String);

  @XmlAnyElement(lax=true)
  public List<Object> getAny();
}]]></programlisting>
        </example>

        <para>JAXB binds any such element to an <literal>Object</literal>, and
        during unmarshalling, all elements encountered are unmarshalled into
        corresponding JAXB objects (including <literal>JAXBElement</literal>s if
        necessary) and placed in this field. If it encounters elements that
        cannot be unmarshalled, DOM elements are produced instead.</para>

        <para>At runtime, you can place either DOM elements or some JAXB
        objects that map to elements. A typical mistake is to put a
        <literal>String</literal> that contains XML fragment, but this won't work;
        you'd have to first read that into a DOM.</para>
    </section>

    <section xml:id="processContents__lax_">
        <title><literal>processContents="lax"</literal></title>

        <para><literal>&lt;xs:any /&gt;</literal> with <code>processContents=lax</code> means any
        XML elements can be placed here, but if their element names match
        those defined in the schema, they have to be valid. XJC actually
        handles this exactly like processContents='strict', since the strict
        binding allows unknown elements anyway.</para>
    </section>
</section>
